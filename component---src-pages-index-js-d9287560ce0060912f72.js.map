{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["BlogIndex","data","location","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","css","containerStyle","map","node","frontmatter","fields","slug","cover","itemContainerStyle","key","style","color","boxShadow","to","itemStyle","imgContainerStyle","fixed","childImageSharp","alt","imageStyle","stringContainerSyle","titleStyle","date","descStyle","dangerouslySetInnerHTML","__html","description","excerpt","authorStyle","pageQuery","marginTop","rhythm","marginBottom","display","flexWrap","width","padding","background","maxWidth","overflow","minHeight","height","minWidth"],"mappings":"iQAwEeA,UA7DG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACjBC,EAAYF,EAAKG,KAAKC,aAAaC,MACnCC,EAAQN,EAAKO,kBAAkBC,MAErC,OACI,YAAC,IAAD,CAAQP,SAAUA,EAAUI,MAAOH,GAC/B,YAAC,IAAD,CAAKG,MAAM,cACX,mBAAKI,IAAKA,YAAIC,IACTJ,EAAMK,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJP,EAAQO,EAAKC,YAAYR,OAASO,EAAKE,OAAOC,KAC5CC,EAAUJ,EAAKC,YAAfG,MACR,OACI,mBAAKP,IAAKA,YAAIQ,GAAqBC,IAAKN,EAAKE,OAAOC,MAChD,YAAC,OAAD,CACII,MAAO,CAAEC,MAAO,UAAWC,UAAU,QACrCC,GAAIV,EAAKE,OAAOC,MAEhB,mBAAKN,IAAKA,YAAIc,IACV,mBAAKd,IAAKA,YAAIe,IACTR,EACG,YAAC,IAAD,CACIS,MAAOT,EAAMU,gBAAgBD,MAC7BE,IAAKtB,EACLI,IAAKA,YAAImB,KAGb,mBAAKnB,IAAKA,YAAImB,MAGtB,mBAAKnB,IAAKA,YAAIoB,IACV,kBAAIpB,IAAKA,YAAIqB,IAAczB,GAC3B,yBAAQO,EAAKC,YAAYkB,MACzB,uBACI,iBACItB,IAAKA,YAAIuB,GACTC,wBAAyB,CACrBC,OACItB,EAAKC,YAAYsB,aACjBvB,EAAKwB,oBAWjD,mBAAK3B,IAAKA,YAAI4B,IACV,YAAC,IAAD,SAaT,IAAMC,EAAS,aAgChBR,EAAa,CACfS,UAAWC,YAAO,EAAI,GACtBC,aAAcD,YAAO,EAAI,IAGvB9B,EAAiB,CACnBgC,QAAS,OACTC,SAAU,QAIR1B,EAAqB,CACvB2B,MAAO,MACPC,QAAS,WACT,4CAA6C,CACzCD,MAAO,SAITrB,EAAY,CACduB,WAAY,UACZC,SAAU,OACVC,SAAU,UAGRxB,EAAoB,CACtBwB,SAAU,SACVJ,MAAO,OACPK,UAAW,QACXC,OAAQ,SAGNtB,EAAa,CACfgB,MAAO,OACPO,SAAU,QAGRtB,EAAsB,CACxBgB,QAASL,YAAO,KAGdR,EAAY,CACdS,aAAcD,YAAO,EAAI,IAGvBH,EAAc,CAChBE,UAAWC,YAAO","file":"component---src-pages-index-js-d9287560ce0060912f72.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, graphql } from 'gatsby';\nimport { css } from '@emotion/core';\n\nimport Bio from '../components/bio';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport { rhythm } from '../utils/typography';\nimport Image from 'gatsby-image';\n\nconst BlogIndex = ({ data, location }) => {\n    const siteTitle = data.site.siteMetadata.title;\n    const posts = data.allMarkdownRemark.edges;\n\n    return (\n        <Layout location={location} title={siteTitle}>\n            <SEO title=\"All posts\" />\n            <div css={css(containerStyle)}>\n                {posts.map(({ node }) => {\n                    const title = node.frontmatter.title || node.fields.slug;\n                    const { cover } = node.frontmatter;\n                    return (\n                        <div css={css(itemContainerStyle)} key={node.fields.slug}>\n                            <Link\n                                style={{ color: 'inherit', boxShadow: `none` }}\n                                to={node.fields.slug}\n                            >\n                                <div css={css(itemStyle)}>\n                                    <div css={css(imgContainerStyle)}>\n                                        {cover ? (\n                                            <Image\n                                                fixed={cover.childImageSharp.fixed}\n                                                alt={title}\n                                                css={css(imageStyle)}\n                                            />\n                                        ) : (\n                                            <div css={css(imageStyle)}></div>\n                                        )}\n                                    </div>\n                                    <div css={css(stringContainerSyle)}>\n                                        <h3 css={css(titleStyle)}>{title}</h3>\n                                        <small>{node.frontmatter.date}</small>\n                                        <div>\n                                            <p\n                                                css={css(descStyle)}\n                                                dangerouslySetInnerHTML={{\n                                                    __html:\n                                                        node.frontmatter.description ||\n                                                        node.excerpt,\n                                                }}\n                                            />\n                                        </div>\n                                    </div>\n                                </div>\n                            </Link>\n                        </div>\n                    );\n                })}\n            </div>\n            <div css={css(authorStyle)}>\n                <Bio />\n            </div>\n        </Layout>\n    );\n};\n\nBlogIndex.propTypes = {\n    data: PropTypes.object,\n    location: PropTypes.object,\n};\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n    query {\n        site {\n            siteMetadata {\n                title\n            }\n        }\n        allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n            edges {\n                node {\n                    excerpt\n                    fields {\n                        slug\n                    }\n                    frontmatter {\n                        date(formatString: \"MMMM DD, YYYY\")\n                        title\n                        description\n                        cover {\n                            childImageSharp {\n                                fixed(width: 400, height: 300) {\n                                    ...GatsbyImageSharpFixed\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\n\nconst titleStyle = {\n    marginTop: rhythm(1 / 4),\n    marginBottom: rhythm(1 / 4),\n};\n\nconst containerStyle = {\n    display: 'flex',\n    flexWrap: 'wrap',\n    // mediaQuery('mobile')\n};\n\nconst itemContainerStyle = {\n    width: '33%',\n    padding: '16px 8px',\n    '@media only screen and (max-width: 768px)': {\n        width: '100%',\n    },\n};\n\nconst itemStyle = {\n    background: '#fbfbfb',\n    maxWidth: '100%',\n    overflow: 'hidden',\n};\n\nconst imgContainerStyle = {\n    overflow: 'hidden',\n    width: '100%',\n    minHeight: '300px',\n    height: '300px',\n};\n\nconst imageStyle = {\n    width: '100%',\n    minWidth: '100%',\n};\n\nconst stringContainerSyle = {\n    padding: rhythm(1 / 2),\n};\n\nconst descStyle = {\n    marginBottom: rhythm(1 / 4),\n};\n\nconst authorStyle = {\n    marginTop: rhythm(2),\n};\n"],"sourceRoot":""}